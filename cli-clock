#!/bin/bash


DIGIT_COLOR=RED
LETTER_COLOR=YELLOW
COLON_COLOR=YELLOW


BLACK=0 RED=1 GREEN=2 YELLOW=3 BLUE=4 MAGENTA=5 CYAN=6 WHITE=7
DC="\e[3${!DIGIT_COLOR};4${!DIGIT_COLOR}m"
LC="\e[3${!LETTER_COLOR};4${!LETTER_COLOR}m"
CC="\e[3${!COLON_COLOR};4${!COLON_COLOR}m"
NC="\e[m"

NUM[0]="######|##__##|##__##|##__##|######"
NUM[1]="____##|____##|____##|____##|____##"
NUM[2]="######|____##|######|##____|######"
NUM[3]="######|____##|######|____##|######"
NUM[4]="##__##|##__##|######|____##|____##"
NUM[5]="######|##____|######|____##|######"
NUM[6]="######|##____|######|##__##|######"
NUM[7]="######|____##|____##|____##|____##"
NUM[8]="######|##__##|######|##__##|######"
NUM[9]="######|##__##|######|____##|____##"
A="_AAAA_|AA__AA|AAAAAA|AA__AA|AA__AA"
B="AAAAA_|AA__AA|AAAAA_|AA__AA|AAAAAA"
C="_AAAA_|AA__AA|AA____|AA__AA|_AAAA_"
D="AAAAA_|AA__AA|AA__AA|AA__AA|AAAAA_"
E="AAAAAA|AA____|AAAAAA|AA____|AAAAAA"
F="AAAAAA|AA____|AAAA__|AA____|AA____"
G="_AAAA_|AA____|AA_AAA|AA__AA|_AAAA_"
H="AA__AA|AA__AA|AAAAAA|AA__AA|AA__AA"
I="AAAA|_AA_|_AA_|_AA_|AAAA"
J="___AAA|____AA|____AA|AA__AA|_AAAA_"
K="AA__AA|AA_AA_|AAAA__|AA_AA_|AA__AA"
L="AA____|AA____|AA____|AA____|AAAAAA"
M="AA___AA|AAA_AAA|AAAAAAA|AA_A_AA|AA___AA"
N="AA__AA|AAA_AA|AAAAAA|AA_AAA|AA__AA"
O="_AAAA_|AA__AA|AA__AA|AA__AA|_AAAA_"
P="AAAAAA|AA__AA|AAAAAA|AA____|AA____"
Q="_AAAA_|AA__AA|AA__AA|AA_AAA|_AAAA_"
R="AAAAA_|AA__AA|AAAAAA|AA_AA_|AA__AA"
S="_AAAAA|AA____|_AAAA_|____AA|AAAAA_"
T="AAAAAA|__AA__|__AA__|__AA__|__AA__"
U="AA__AA|AA__AA|AA__AA|AA__AA|_AAAA_"
V="AA__AA|AA__AA|AA__AA|_AAAA_|__AA__"
W="AA___AA|AA_A_AA|AAAAAAA|AAA_AAA|AA___AA"
X="AA__AA|_AAAA_|__AA__|_AAAA_|AA__AA"
Y="AA__AA|AA__AA|_AAAA_|__AA__|__AA__"
Z="AAAAAA|___AA_|__AA__|_AA___|AAAAAA"
COLON="__|::|__|::|__"
COMMA="__|__|__|::|_:"
EXCLEMATION="::|::|::|__|::"
PERIOD="__|__|__|__|::"
SEMICOLON="__|::|__|::|_:"
SPACE="__|__|__|__|__"
SPACE_WIDTH=2
LINE_HEIGHT=$(awk -F\| '{ print NF }' <<<${COLON})
TIMEZONE=$(awk -F'"' '/ZONE=/ { print $2 }' /etc/sysconfig/clock)

screenSetup() {
	# determine terminal size
	dimensions=$(
		tput -S <<-!
			lines
			cols
		!
	)
	lines=${dimensions%%$'\n'*}
	cols=${dimensions##*$'\n'}

	# redraw screen if terminal dimensions change
	if [[ ${dimensions} != ${dimensions_log} ]]; then
		dimensions_log=${dimensions}
		clear
		unset time_log
	fi

	# put the cursor in the correct position to center the clock in the terminal
	start_row=$(( (lines-HEIGHT)/2 ))
	start_col=$(( (cols-WIDTH)/2 ))
	start_row=2
	start_col=$(( ${SPACE_WIDTH} + 1 ))
#	tput -S <<-!
#		cup ${start_row} ${start_col}
#		civis
#	!
	vert_offset=0
	printf "\E[$((${start_row}+${vert_offset}));${start_col}f"
	space_on_line=$(( cols - start_col ))
}

drawChar() {
	local string=$1
	case ${string} in
		[a-z])	string=${string^^};;
		:)	string=COLON;;
		,)	string=COMMA;;
		!)	string=EXCLEMATION;;
		.)	string=PERIOD;;
		\;)	string=SEMICOLON;;
		' ')	string=SPACE;;
	esac
	if [[ ${string} =~ [0-9] ]]; then
		string=${NUM[${string}]}
	else
		string=${!string}
	fi
	local char_width=${string%%|*}
	char_width=${#char_width}
	if [[ ${char_width} -gt ${space_on_line} ]]; then
		(( vert_offset+=$(( LINE_HEIGHT + 1 )) ))
		printf "\E[$(( ${start_row} + ${vert_offset} ));${start_col}f"
		space_on_line=$(( cols - start_col ))
	fi
	local newlines=${string//[^|]}
	newlines=${#newlines}
	string=${string//#/${DC}#}
	string=${string//A/${LC}A}
	string=${string//:/${CC}:}
	string=${string//_/${NC} }
	local IFS_OLD="${IFS}"
	local IFS='|'
	local i
	for i in ${string}; do
		local segments[${#segments[@]}]=${i}
	done
	IFS=${IFS_OLD}
	for (( i=0; ${i} <= ${#segments[@]}; i++ )); do
		segment=${segments[${i}]}${NC}
		if [[ ${i} -lt ${newlines} ]]; then
			printf "${segment}\E[${char_width}D\E[1B"
		else
			printf "${segment}"
		fi
	done
	printf "\E[${SPACE_WIDTH}C\E[${newlines}A"
	# keep track of remaining space on the current line
	(( space_on_line-=$(( ${char_width} + ${SPACE_WIDTH} )) ))
}

getDate() {
	for i in ${TIMEZONE} ${@}; do
		TZ=${i} date +"%I:%M:%S %Z"
	done
}

end() {
	printf "\n%.0s" $(eval echo {0..${LINE_HEIGHT}})
	exit
}

screenSetup

#tput -S <<-!
#	clear
#	cup 10 0
#!

date=$(getDate)
date="$@"
loops=${#date}
for (( i=0; i<${loops}; i++ )); do
	drawChar "${date:0:1}"
	date=${date:1}
	#[[ ${date} ]] && printf "\033[${SPACE_WIDTH}C"
done
end
#exit

#getDate | while read -sn1 char; do
#	drawChar ${char^^}
#done


#exit

#for i in t h i s SPACE i s space a space t e s t; do
for i in {a..z}; do
	drawChar ${i^^}
#	tput cuf ${SPACE_WIDTH}
done
#tput cup 20 0
end
time for i in {a..z}; do
	drawChar2 ${i^^}
	tput cuf ${SPACE_WIDTH}
done
tput cup 0 0

getDate Europe/London Asia/Tokyo
exit


while sleep ${delay:-0}; do

	screenSetup

	# initialize date-reading loop
	unset forward_movement
	time_cur=$(date +%I:%M:%S)
	for (( i=0; ${i}<${#time_cur}; i++ )); do

		char_cur=${time_cur:${i}:1}
		char_log=${time_log:${i}:1}

		case ${char_cur} in
			[0-9])
				string=${NUM[${char_cur}]}
				char_width=${NUM_WIDTH}
			;;

			:)
				string=${COLON}
				char_width=${COLON_WIDTH}
			;;
		esac

		# if the character has changed, redraw it! 
		if [[ ${char_cur} != ${char_log} ]]; then
			[[ ${forward_movement} ]] && tput cuf ${forward_movement}
			unset forward_movement
			for (( y=1; ${y}<=${HEIGHT}; y++ )); do
				segment=$(cut -f ${y} -d '|' <<<${string})
				segment=$(sed "s/\(#\+\)/\\${DC}\1/g;\
					    s/\(:\+\)/\\${CC}\1/g;\
					    s/\(_\+\)/\\${NC}\1/g;\
					    s/_/ /g" <<<${segment}${NC})

				tput sc
				printf "${segment}"
				tput -S <<-!
					rc
					cud 1
				!
			done
			tput cuu ${HEIGHT}
		fi

		(( forward_movement+=${char_width} ))
		if [[ ${i} -lt $(( ${#time_cur} - 1 )) ]]; then
			(( forward_movement+=${SPACE_WIDTH} ))
		fi

	done
	time_log=${time_cur}

	[[ $1 == "--hide-cursor" ]] || tput -S <<-!
		cup ${lines} 0 
		cnorm
	!

	# determine how long to sleep before the next update
	nanoseconds=10#$(date +%N)
	delay=0.$(( 1000000000 - ${nanoseconds} ))

done
